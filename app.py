import os
import re
import logging
import pandas as pd
import plotly.express as px
import chainlit as cl
from sqlalchemy import create_engine, text
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.chains import create_sql_query_chain
from langchain_community.utilities.sql_database import SQLDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
SUPABASE_DB_URL = os.environ.get("SUPABASE_DB_URL")

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
db_url = os.environ.get("DATABASE_URL", SUPABASE_DB_URL)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable not set")
if not db_url:
    raise ValueError("DATABASE connection URL not set. Please set SUPABASE_DB_URL")

logger.info("Initializing application with database URL: %s", db_url[:20] + "...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –º–æ–¥–µ–ª–∏
# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0.1,  # –ù–µ–±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
    api_key=OPENAI_API_KEY
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
try:
    db = SQLDatabase.from_uri(db_url)
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SQLAlchemy engine –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å pandas
    engine = create_engine(db_url)
    logger.info("Successfully connected to database")
except Exception as e:
    logger.error(f"Failed to connect to database: {str(e)}")
    raise

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü
def get_table_schema():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        schema_info = db.get_table_info()
        logger.info(f"Retrieved database schema, length: {len(schema_info)}")
        return schema_info
    except Exception as e:
        logger.error(f"Error getting database schema: {str(e)}")
        return "Error retrieving database schema."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ LLM
def clean_sql_query(query):
    """
    –û—á–∏—â–∞–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞,
    –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π SQL.
    """
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å—Ç–∏–ª–µ SQL (-- –∏ /* */)
    query = re.sub(r'--.*?$', '', query, flags=re.MULTILINE)
    query = re.sub(r'/\*.*?\*/', '', query, flags=re.DOTALL)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ backticks, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç LLM
    query = query.replace('`', '')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ SELECT-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    if not query.strip().upper().startswith('SELECT'):
        if 'SELECT' in query.upper():
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å SELECT
            select_match = re.search(r'SELECT\s+.*', query, re.IGNORECASE | re.DOTALL)
            if select_match:
                query = select_match.group(0)
            else:
                raise ValueError("No valid SELECT statement found in query")
        else:
            raise ValueError("Only SELECT queries are allowed")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
    query = query.strip()
    if not query.endswith(';'):
        query += ';'
    
    return query

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQL chain –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
template = """
You are an expert Oracle SQL assistant that converts natural language questions to SQL.

Based on the database schema below, write a SELECT query that answers the user's question.
Return ONLY the SQL query without any explanation, comments, or markdown formatting.

Database Schema:
{schema}

Important rules:
1. ONLY generate a valid SELECT query.
2. Do NOT include any explanations or comments in your response.
3. Make sure the tables and columns referenced exist in the schema.
4. Only generate a SQL query that can be executed directly.
5. Use aliases for column names to make results more readable.
6. Add an ORDER BY clause when appropriate.
7. Limit results to 100 rows maximum unless specified otherwise.

User Question: {question}

SQL Query (IMPORTANT: return ONLY the SQL query):"""

prompt = ChatPromptTemplate.from_template(template)
sql_chain = create_sql_query_chain(llm, db, prompt=prompt)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ pandas DataFrame
def execute_sql(query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ pandas DataFrame"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        clean_query = clean_sql_query(query)
        logger.info(f"Executing SQL query: {clean_query}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        with engine.connect() as connection:
            df = pd.read_sql_query(text(clean_query), connection)
        
        logger.info(f"Query executed successfully. Result shape: {df.shape}")
        return df, None
    except Exception as e:
        logger.error(f"Error executing SQL query: {str(e)}")
        return None, str(e)

@cl.on_chat_start
async def on_chat_start():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        schema = get_table_schema()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ö–µ–º—É –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cl.user_session.set("schema", schema)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        table_pattern = r"CREATE TABLE (\w+)"
        tables = re.findall(table_pattern, schema)
        
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
        if not tables:
            tables = ["technologies", "projects"]
            logger.warning("No tables found in schema, using fallback table list")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
        welcome_message = f"""# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oracle SQL Assistant!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫.

### –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
{', '.join(f'`{table}`' for table in tables)}

### –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
- "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö?"
- "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω–∞—á–∞—Ç—ã–µ –ø–æ—Å–ª–µ 2020 –≥–æ–¥–∞"
- "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É –Ω–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?"
"""
        
        await cl.Message(content=welcome_message).send()
        
    except Exception as e:
        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logger.error(error_message)
        await cl.Message(content=error_message).send()

@cl.on_message
async def on_message(message: cl.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–æ—Ç–≤–µ—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_question = message.content
    logger.info(f"Received user question: {user_question}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schema = cl.user_session.get("schema")
    if not schema:
        logger.warning("Schema not found in session, fetching again")
        schema = get_table_schema()
        cl.user_session.set("schema", schema)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
    thinking_msg = cl.Message(content="ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    await thinking_msg.send()
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        await thinking_msg.update(content="üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é SQL-–∑–∞–ø—Ä–æ—Å...")
        logger.info("Generating SQL query for user question")
        
        sql_query = await cl.make_async(sql_chain.invoke)({"question": user_question, "schema": schema})
        logger.info(f"Generated SQL query: {sql_query}")
        
        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
        await thinking_msg.update(content=f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é SQL-–∑–∞–ø—Ä–æ—Å:\n```sql\n{sql_query}\n```")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ DataFrame
        df, error = execute_sql(sql_query)
        
        if error:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            await thinking_msg.update(content=f"""‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:
```sql
{sql_query}
```

**–û—à–∏–±–∫–∞**: {error}
""")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        elements = []
        
        if df.empty:
            # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_content = "–ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É Markdown
            table_md = df.to_markdown(index=False)
            result_content = f"## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞\n\n{table_md}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥—è—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞
            if len(df.columns) == 2 and df.shape[0] > 1 and df.shape[0] <= 15:
                # –î–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ - —Ö–æ—Ä–æ—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü —á–∏—Å–ª–æ–≤—ã–º
                if pd.api.types.is_numeric_dtype(df.iloc[:, 1]):
                    try:
                        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É Plotly
                        fig = px.bar(df, x=df.columns[0], y=df.columns[1], 
                                     title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫",
                                     labels={df.columns[0]: df.columns[0], df.columns[1]: df.columns[1]})
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                        fig.update_layout(
                            template="plotly_dark",
                            paper_bgcolor="rgba(0,0,0,0)",
                            plot_bgcolor="rgba(30,30,30,0.3)",
                            margin=dict(l=20, r=20, t=40, b=20),
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç Plotly
                        elements = [cl.Plotly(name="results_chart", figure=fig)]
                        logger.info("Created bar chart visualization")
                    except Exception as viz_error:
                        logger.error(f"Error creating visualization: {str(viz_error)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å SQL-–∑–∞–ø—Ä–æ—Å–æ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        final_content = f"""### SQL-–∑–∞–ø—Ä–æ—Å
```sql
{sql_query}
```

{result_content}

–ù–∞–π–¥–µ–Ω–æ {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤.
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if elements:
            await thinking_msg.update(content=final_content, elements=elements)
        else:
            await thinking_msg.update(content=final_content)
            
    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SQL
        error_message = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_message)
        await thinking_msg.update(content=error_message)